import numpy as np
import matplotlib.pyplot as plt


losses1 = [
    1.6103e-01,
    6.4159e-02,
    2.3435e-03,
    9.5856e-04,
    6.7186e-04,
    6.6618e-04,
    6.6615e-04,
    6.6615e-04
]

modulus1 = [
    100000.00000000001,
    141160.64251398077,
    247067.46479037852,
    266991.6579867428,
    280759.26150334626,
    282954.863438501,
    283115.5147329102,
    283117.80212982884,
]

# Change to kPa
modulus1 = [m/1000 for m in modulus1]




losses2 = [
    4.5161e-02,
    4.3909e-02,
    4.2610e-02,
    3.7108e-02,
    1.2719e-02,
    4.9132e-01,
    5.9499e-03,
    2.1766e+01,
    3.1633e-01,
    2.1976e-03,
    1.8319e-03,
    7.3277e-04,
    6.6806e-04,
    6.6554e-04,
    6.6616e-04,
    6.6555e-04,
    6.6615e-04,
    6.6554e-04,
    6.6616e-04
]

modulus2 = [
    999999.9999999995,
    965428.0309527472,
    931330.3486790664,
    806564.6040779998,
    453712.53165633767,
    45430.470763363,
    378021.3593620548,
    999.9999999999998,
    67513.8124837401,
    327973.08101580595,
    321585.1628806489,
    275177.54709195864,
    284494.8325256912,
    283157.6576623379,
    283219.6470484106,
    283157.7953701157,
    283157.6576972458,
    283157.6576623379,
    283157.65767979214,
]

# Change to kPa
modulus2 = [m/1000 for m in modulus2]



# Match lengths, as modulus1 is shorter
#for i in range(len(modulus2)-len(modulus1)):
#    modulus1.append(283157/1000)
#    losses1.append(6.6615e-04)




data = {
'5kPa': 
    {
    'loss': 
        [2.4522479723755564, 0.40814348145515883, 0.18109162360749323, 0.04674183063335706, 0.03921145422420586, 0.005406646645826199, 1.1134941897744342, 0.0018570538717828486, 0.19231695414108854, 0.0008672328858130156, 0.0006732073492399789, 0.0006661906117584655, 0.0006661525189337645, 0.0006661542400282598, 0.0006655442484089913, 0.0006661521635349426, 0.0006655442484089913, 0.0006661536502883302, 0.0006661507198085635],
    'modulus':
        [5000.000000000004, 54733.64295891354, 94480.98314120641, 1047204.3486721788, 851124.9555666012, 371399.1235178329, 13625.361204515224, 322045.83159826486, 91630.71075988653, 298066.28528327757, 280498.35382131464, 283311.7644081993, 283119.93894640636, 283117.74983165966, 283119.93689944374, 283119.93890444003, 283119.93689944374, 283119.9379019419, 283119.93689944426]
    },

# '100kPa':
#     {
#     'loss':
#         [
#             1.6103e-01,
#             6.4159e-02,
#             2.3435e-03,
#             9.5856e-04,
#             6.7186e-04,
#             6.6618e-04,
#             6.6615e-04,
#             6.6615e-04
#         ],
#     'modulus':
#         [
#             100000.00000000001,
#             141160.64251398077,
#             247067.46479037852,
#             266991.6579867428,
#             280759.26150334626,
#             282954.863438501,
#             283115.5147329102,
#             283117.80212982884,
#         ]
#     },
    
# '1MPa':
#     {
#     'loss':
#          [
#             4.5161e-02,
#             4.3909e-02,
#             4.2610e-02,
#             3.7108e-02,
#             1.2719e-02,
#             4.9132e-01,
#             5.9499e-03,
#             2.1766e+01,
#             3.1633e-01,
#             2.1976e-03,
#             1.8319e-03,
#             7.3277e-04,
#             6.6806e-04,
#             6.6554e-04,
#             6.6616e-04,
#             6.6555e-04,
#             6.6615e-04,
#             6.6554e-04,
#             6.6616e-04
#         ],
#     'modulus':
#         [
#             999999.9999999995,
#             965428.0309527472,
#             931330.3486790664,
#             806564.6040779998,
#             453712.53165633767,
#             45430.470763363,
#             378021.3593620548,
#             999.9999999999998,
#             67513.8124837401,
#             327973.08101580595,
#             321585.1628806489,
#             275177.54709195864,
#             284494.8325256912,
#             283157.6576623379,
#             283219.6470484106,
#             283157.7953701157,
#             283157.6576972458,
#             283157.6576623379,
#             283157.65767979214,
#         ]
#     },
    
'0.56MPa':
    {
    'loss':
        [0.021649688362003913, 0.019745106156235936, 21.765806757451642, 0.22402339984037578, 0.004849890636609833, 0.003999879396588748, 0.0014839472337419015, 0.0008358891469635939, 0.0006692729602321283, 0.0006661602126540681, 0.0006661540901342309],
    'modulus':
        [559999.9999999998, 536104.0041890581, 999.9999999999998, 84327.94518427996, 364662.89147389325, 354061.9861018179, 314651.80034360604, 270647.7376663717, 284883.99707884307, 283207.2771997008, 283117.0416261544]
    },
    
    
'1.11MPa':
    {
    'loss':
        [0.04883133679238192, 0.04774526220674591, 0.04663798972483228, 0.041855353115200396, 0.019577775469170233, 0.34959089672333504, 0.007698598068530227, 0.001312938761038514, 0.00856109485797683, 0.0006665361071318981, 0.0006661580720669075, 0.0006661552855394958],
    'modulus':
        [1115000.000000001, 1079051.7531693622, 1043495.1086025077, 912605.3059620612, 533891.8321378648, 62536.623063313025, 397938.37469011726, 259677.27270085813, 407586.262466832, 283731.77527814324, 283177.0826154614, 283117.29652648035]
    },
    
'1.67MPa':
    {
    'loss':
        [0.06029306723450115, 0.05970600356848936, 0.059095532214800746, 0.05651941156699462, 0.04417699038952129, 0.012894958353783908, 0.024590346066625024, 0.0007112348669405955, 0.009240283156449949, 0.0006660544444033245, 0.0006661581144778107, 0.000666540900626917, 0.0006667992566116258, 0.0006668194530447209, 0.0006668221263400973, 0.0006660544444033245, 0.0006668202801860566, 0.0006660544444033245, 0.0006668188275891016, 0.0006660544444033245, 0.0006668217975415327, 0.0006660544444033245, 0.0006668185005090321, 0.0006660544444033245, 0.0006668230949158688, 0.0006666468665854476, 0.000666811665639318, 0.000666819328620044, 0.0006668189715053843, 0.0006660544444033245, 0.0006668244420154436, 0.0006660544444033245, 0.00066682068410434, 0.0006660544444033245, 0.0006668217381926801, 0.0006660544444033245, 0.0006668222764344414, 0.0006660544444033245, 0.0006668222764344414, 0.0006660544444033245],
    'modulus':
        [1670000.0000000005, 1630213.9805162763, 1590613.7047994155, 1441601.239591296, 972672.9878458192, 201582.89958897774, 599188.8581027717, 290169.04472269065, 211952.2404687249, 283931.7203604045, 283194.80648285436, 283736.0772515674, 283918.8052429575, 283931.66831716767, 283931.72035956423, 283931.7203604045, 283931.7203599844, 283931.7203604045, 283931.7203601942, 283931.7203604045, 283931.72036029963, 283931.7203604045, 283931.7203603521, 283931.7203604045, 283931.72036037827, 283816.9111204556, 283927.41381901345, 283931.71458686807, 283931.7203603939, 283931.7203604045, 283931.72036039946, 283931.7203604045, 283931.720360402, 283931.7203604045, 283931.720360403, 283931.7203604045, 283931.720360404, 283931.7203604045, 283931.720360404, 283931.7203604045]
    },
    
'2.22MPa':
    {
    'loss':
        [0.06645663321028095, 0.06609697678284135, 0.06572527608562219, 0.06417459196461937, 0.05683823183775449, 0.010298095676999271, 3.990250115190197, 0.1081650655080597, 0.0015302160301467447, 21.765806757451642, 0.36442739089161114, 0.0009216545290408798, 0.000851579021837119, 0.0006667041576812287, 0.0006655498596635145, 0.0006655315652293669, 0.000665532674621725, 0.0006661610458755503, 0.0006655315652293669, 0.0006661646818406771, 0.0006655315652293669, 0.0006655473587181805, 0.0006655315652293669, 0.0006661667734798194, 0.0006655315652293669, 0.0006655339788841558, 0.0006655315652293669, 0.000666164408410213, 0.0006655315652293669, 0.0006661630957858232, 0.0006661608591985587, 0.0006661625192007396, 0.0006655315652293669, 0.0006661648156131737, 0.0006655315652293669, 0.000666161308769796, 0.0006655315652293669, 0.0006655479103775807, 0.0006655315652293669, 0.0006661634191667218, 0.0006655315652293669, 0.0006661595973494347, 0.0006655315652293669, 0.0006661612317451],
    'modulus':
        [2224999.9999999995, 2183364.8090571286, 2141836.450263593, 1983473.0382142914, 1458768.1953489748, 426801.78279665014, 3127.418349163006, 118336.9434402329, 315692.36208217894, 999.9999999999998, 60419.61158721925, 300048.30749243294, 297452.88377068285, 282152.1843549531, 283293.5981938339, 283222.8157475438, 283224.50927754067, 283222.8172632431, 283222.8157475438, 283222.8165053932, 283222.8157475438, 283222.81612646877, 283222.8157475438, 283222.81593700603, 283222.8157475438, 283222.8158422749, 283222.8157475438, 283222.8157949096, 283222.8157475438, 283222.8157712265, 283223.0986569245, 283222.8157476188, 283222.8157475438, 283222.815747581, 283222.8157475438, 283222.81574756245, 283222.8157475438, 283222.81574755337, 283222.8157475438, 283222.81574754836, 283222.8157475438, 283222.8157475463, 283222.8157475438, 283222.8157475448]
    },
    
'2.78MPa':
    {
    'loss':
        [0.0702727665997923, 0.07003097476157222, 0.06978206382728777, 0.0687498634897917, 0.06400929957823828, 0.03244846423089081, 1.1546426050134555, 0.017307922322336126, 0.005942658581721367, 0.3021482672268386, 0.0021369556950776194, 0.0006661675280376097, 0.0006732314236930849, 0.0006661526578791247, 0.0006661523141722188],
    'modulus':
        [2780000.000000002, 2737253.940765823, 2694576.263313037, 2530416.6697562584, 1967878.499456991, 719818.8974627139, 12886.147469857839, 506201.9629830864, 377937.62600212236, 69786.53153059928, 326952.7622343219, 283234.7216681935, 280494.38618906477, 283117.8603028241, 283117.74259699404]
    }
}


final_converged = [v['modulus'][-1] for _,v in data.items()]
import numpy as np
print(f"Over {len(data)} Runs: Average Young's Modulus: {np.array(final_converged).mean()} --- Standard Deviation: {np.array(final_converged).std()}")



# Log mapping
for k, v in data.items():
    v['loss'] = [np.log(l) for l in v['loss']]
    #v['modulus'] = [np.log(l) for l in v['modulus']]



fig, ax = plt.subplots(figsize=(12,8))
#ax.plot(modulus1, marker='o', markersize=4, label='Initialization 100kPa')
#ax.plot(modulus2, marker='o', markersize=4, label='Initialization 1MPa')
#ax.scatter(modulus, marker='x', s=80)

for k, v in data.items():
    ax.plot(v['modulus'][:20], linewidth=1, marker='o', markersize=2, label=f'Initialization {k}')


#major_ticks = np.arange(50, 500, 50)
#minor_ticks = np.arange(50, 500, 25)
#ax.set_xticks(major_ticks)
#ax.set_xticks(minor_ticks, minor=True)

plt.xticks(fontsize=22)
plt.yticks(fontsize=22)

ax.grid(which='minor', alpha=0.1)
ax.grid(which='major', alpha=0.5)   

ax.set_title("Young's Modulus Optimization", fontsize=28)
ax.set_xlabel("Optimization Iteration", fontsize=24)
ax.set_ylabel("Young's Modulus [kPa]", fontsize=24)
ax.title.set_position([.5, 1.03])
ax.legend(loc="lower center", bbox_to_anchor=(0.5, -0.45), ncol= 2, prop={'size': 24})

fig.savefig(f"clampedBeamCaseE_staticparameterOptimization.pdf", bbox_inches='tight')
fig.savefig(f"clampedBeamCaseE_staticparameterOptimization.png", bbox_inches='tight', dpi=300)
plt.close()



fig, ax = plt.subplots(figsize=(12,8))
for k, v in data.items():
    ax.plot(v['loss'], marker='o', markersize=2, label=f'Initialization {k}')

plt.xticks(fontsize=22)
plt.yticks(fontsize=22)

ax.grid(which='minor', alpha=0.1)
ax.grid(which='major', alpha=0.5)   

ax.set_title("Young's Modulus Optimization", fontsize=28)
ax.set_xlabel("Optimization Iteration", fontsize=24)
ax.set_ylabel("Logarithmic MSE Loss", fontsize=24)
ax.title.set_position([.5, 1.03])
ax.legend(loc="lower center", bbox_to_anchor=(0.5, -0.45), ncol= 2, prop={'size': 24})

fig.savefig(f"clampedBeamCaseE_staticparameterOptimization_loss.png", bbox_inches='tight', dpi=300)
plt.close()

